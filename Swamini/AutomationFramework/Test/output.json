{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}, "tests": {"0": {"status": "ERROR", "message": "self = <Test.test_case.TestDummyWebsite object at 0x00000233C36346E0>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n>       self.dw = DummyWebsite(self.driver)\n\ntest_case.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Module\\locator_function.py:7: in __init__\n    super().__init__(driver)\n..\\base\\seleniumbase.py:8: in __init__\n    self.wait=WebDriverWait(self.driver,timeout=self.driver)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"302307d22d26bbd1fc1d2cee17ad6c98\")>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"302307d22d26bbd1fc1d2cee17ad6c98\")>\ntimeout = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"302307d22d26bbd1fc1d2cee17ad6c98\")>, poll_frequency = 0.5, ignored_exceptions = None\n\n    def __init__(\n        self,\n        driver: D,\n        timeout: float,\n        poll_frequency: float = POLL_FREQUENCY,\n        ignored_exceptions: typing.Optional[WaitExcTypes] = None,\n    ):\n        \"\"\"Constructor, takes a WebDriver instance and timeout in seconds.\n    \n        :Args:\n         - driver - Instance of WebDriver (Ie, Firefox, Chrome or Remote) or a WebElement\n         - timeout - Number of seconds before timing out\n         - poll_frequency - sleep interval between calls\n           By default, it is 0.5 second.\n         - ignored_exceptions - iterable structure of exception classes ignored during calls.\n           By default, it contains NoSuchElementException only.\n    \n        Example::\n    \n         from selenium.webdriver.support.wait import WebDriverWait \\n\n         element = WebDriverWait(driver, 10).until(lambda x: x.find_element(By.ID, \"someId\")) \\n\n         is_disappeared = WebDriverWait(driver, 30, 1, (ElementNotVisibleException)).\\\\ \\n\n                     until_not(lambda x: x.find_element(By.ID, \"someId\").is_displayed())\n        \"\"\"\n        self._driver = driver\n>       self._timeout = float(timeout)\nE       TypeError: float() argument must be a string or a real number, not 'WebDriver'\n\nC:\\Users\\ADMIN\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:65: TypeError\n", "test_name": "test_booking_ticket", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <Test.test_case.TestDummyWebsite object at 0x00000233C3664800>\n\n    @pytest.fixture(autouse=True)\n    def setup(self):\n>       self.dw = DummyWebsite(self.driver)\n\ntest_case.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Module\\locator_function.py:7: in __init__\n    super().__init__(driver)\n..\\base\\seleniumbase.py:8: in __init__\n    self.wait=WebDriverWait(self.driver,timeout=self.driver)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"302307d22d26bbd1fc1d2cee17ad6c98\")>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"302307d22d26bbd1fc1d2cee17ad6c98\")>\ntimeout = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"302307d22d26bbd1fc1d2cee17ad6c98\")>, poll_frequency = 0.5, ignored_exceptions = None\n\n    def __init__(\n        self,\n        driver: D,\n        timeout: float,\n        poll_frequency: float = POLL_FREQUENCY,\n        ignored_exceptions: typing.Optional[WaitExcTypes] = None,\n    ):\n        \"\"\"Constructor, takes a WebDriver instance and timeout in seconds.\n    \n        :Args:\n         - driver - Instance of WebDriver (Ie, Firefox, Chrome or Remote) or a WebElement\n         - timeout - Number of seconds before timing out\n         - poll_frequency - sleep interval between calls\n           By default, it is 0.5 second.\n         - ignored_exceptions - iterable structure of exception classes ignored during calls.\n           By default, it contains NoSuchElementException only.\n    \n        Example::\n    \n         from selenium.webdriver.support.wait import WebDriverWait \\n\n         element = WebDriverWait(driver, 10).until(lambda x: x.find_element(By.ID, \"someId\")) \\n\n         is_disappeared = WebDriverWait(driver, 30, 1, (ElementNotVisibleException)).\\\\ \\n\n                     until_not(lambda x: x.find_element(By.ID, \"someId\").is_displayed())\n        \"\"\"\n        self._driver = driver\n>       self._timeout = float(timeout)\nE       TypeError: float() argument must be a string or a real number, not 'WebDriver'\n\nC:\\Users\\ADMIN\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:65: TypeError\n", "test_name": "test_provide_billing_details", "rerun": "0"}}, "suite_name": "test_case.py"}}}, "date": "April 26, 2024", "start_time": 1714132487.4638178, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "2", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "2"}